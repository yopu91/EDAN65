import java.util.HashSet;
aspect FuncCalls {

	inh ParamFunc Stmt.enclosingFunction();
	eq ParamFunc.getStmts(int index).enclosingFunction() = this;
	
	inh ParamFunc Expr.enclosingFunction();
	eq Stmt.getChild().enclosingFunction() = enclosingFunction();
	
	coll Set<ParamFunc> ParamFunc.functionCalls() [new HashSet<ParamFunc>()] with add root ParamFunc;

	FuncCall contributes getName().decl().function() to ParamFunc.functionCalls() for enclosingFunction();
 
}

aspect Reachability{
	syn HashSet<ParamFunc> ParamFunc.reachable() circular [new HashSet<ParamFunc>()];
	eq ParamFunc.reachable() {
		HashSet<ParamFunc> r = new HashSet<ParamFunc>();
  		for (ParamFunc f : functionCalls()) {
    			//ParamFunc f = ppp.function();
    			r.add(f);
    			r.addAll(f.reachable());
  		}
  		return r;
 	} 
}
