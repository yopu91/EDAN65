import java.util.HashMap;

aspect Interpret 
{
    public class ActivationRecord 
    {
        protected HashMap<String,Integer> vars = new HashMap<String,Integer>();
        protected ActivationRecord parent = null;
        
        public ActivationRecord() { }
        public ActivationRecord(ActivationRecord parent) {
            this.parent = parent;
        }
        
        public ActivationRecord scope() {
            return new ActivationRecord(this);
        }

        public boolean contains(String name) {
            return vars.containsKey(name);
        }

        public void decl(String name, int val) {
            vars.put(name, val);
        }

        public void set(String name, int val) {
            if (!contains(name)) {
                if (parent != null)
                    parent.set(name, val);
                else
                    throw new RuntimeException("Undefined variable '" + name + "'");
            }
            vars.put(name, val);
        }

        public int get(String name) {
            if (!contains(name)) {
                if (parent != null)
                    return parent.get(name);
                throw new RuntimeException("Variable '" + name + "' not set");
            }
		System.out.println("Returning vars.get("+name+")");
            return vars.get(name);
        }
    }

    public class ReturnException extends RuntimeException {
        protected int v;
        public ReturnException(int v) { this.v = v; }
        public int val() { return v; }
    }

    public class BreakException extends RuntimeException {
        public BreakException() { }
    }

    public class ContinueException extends RuntimeException {
        public ContinueException() { }
    }

    public void Program.eval() {
        // find main
        ParamFunc main = null;
        for(int i = 0; i < getNumParamFunc(); i++) {
            ParamFunc pf = getParamFunc(i);
            IdDecl id = pf.lookup("main");
            if (id.isUnknown())
                continue;
            if (!id.isFunction())
                throw new RuntimeException("Main is not a function");

            main = id.function();
        }
        if (main == null)
            throw new RuntimeException("Main is undefined");
        
        main.eval(new ActivationRecord());
    }

    public int ParamFunc.eval(ActivationRecord rec) {
        try {
	     for(Stmt st : getStmtsList())
            	st.eval(rec);
        }
        catch(ReturnException r) { return r.val(); }
        return 0; 
    }

    /** statements **/

    public void Stmt.eval(ActivationRecord rec) { }

    @Override
    public void Assignment.eval(ActivationRecord rec) {
        int v = getExpression().eval(rec);
        rec.set(getIdentifier().getID(), v);
    }

    @Override
    public void Declare.eval(ActivationRecord rec) {
        if (hasExpr()) {
            int v = getExpr().eval(rec);
		System.out.println("In Declare.eval, expression evaluated to: "+v);
            rec.decl(getIdDecl().getID(), v);
        }
    }

    @Override
    public void FuncStmt.eval(ActivationRecord rec) {
        getFuncCall().eval(rec);
    }

    @Override
    public void ReturnStmt.eval(ActivationRecord rec) {
        int r = getExpr().eval(rec);
//        throw new ReturnException(r);
    }
/*
    @Override
    public void BreakStmt.eval(ActivationRecord rec) {
        throw new BreakException();
    }

    @Override
    public void ContinueStmt.eval(ActivationRecord rec) {
        throw new ContinueException();
    }
*/
    @Override
    public void WhileStmt.eval(ActivationRecord rec) {
        ActivationRecord scope = rec.scope();
        Expr cond = getCond();
            while(cond.eval(scope) == 1) {
                try {
			for(int i = 0; i<getNumStmt(); i++){
				getStmt(i).eval(scope);
			}
                }
                catch(ContinueException cont) { continue; }
                catch(BreakException brk) { return; }
            }
    }

	 @Override
   	 public void IfStmt.eval(ActivationRecord rec) {
        	Expr cond = getCond();
		/*If the boolean expression evaluates to 1 (i.e true) then go through the stmts within*/
        	if (cond.eval(rec) == 1) {
            		ActivationRecord then_scope = rec.scope();
			for(int i = 0; i<getNumThen(); i++){
				getThen(i).eval(then_scope);
			}
        	}
        	else if (hasElseStmt()) {
            		ActivationRecord else_scope = rec.scope();
	            	getElseStmt().eval(else_scope);
        	}
    	}

	@Override
	public void ElseStmt.eval(ActivationRecord rec) {
		for(int i=0; i<getNumStmt(); i++){
			getStmt(i).eval(rec);
		}
	}

/*
    @Override
    public void Block.eval(ActivationRecord rec) {
        for(Statement stmt : getStatements())
            stmt.eval(rec);
    }
*/

    /** expressions **/

    public int Expr.eval(ActivationRecord rec) {
        return 0;
    }
/*
    	@Override
	    public int IdUse.eval(ActivationRecord rec) { return rec.get(getID()); }
*/

/*
    @Override
    public int IntLiteral.eval(ActivationRecord rec) { return Integer.parseInt(getINT()); }

    @Override
    public int BoolLiteral.eval(ActivationRecord rec) { return Boolean.parseBoolean(getBOOL()) ? 1 : 0; }
*/


/* 1.7 */

    @Override
    public int FuncCall.eval(ActivationRecord rec) {
        ParamFunc pf = getName().function();
        ActivationRecord call = rec.scope();
        for(int i = 0; i < getNumE(); i++) {
            call.decl(pf.getParams(i).getIdDecl().getID(), getE(i).eval(rec));
        }
        return pf.eval(call);
    }

    /** arithmetic **/

    	@Override
    	public int Add.eval(ActivationRecord rec) {return getLeft().eval(rec) + getRight().eval(rec); }
    	@Override
    	public int Sub.eval(ActivationRecord rec) { return getLeft().eval(rec) - getRight().eval(rec); }
    	@Override
    	public int Mul.eval(ActivationRecord rec) { return getLeft().eval(rec) * getRight().eval(rec); }
    	@Override
    	public int Div.eval(ActivationRecord rec) { return getLeft().eval(rec) / getRight().eval(rec); }
    	@Override
    	public int Mod.eval(ActivationRecord rec) { return getLeft().eval(rec) % getRight().eval(rec); }

    /** logic **/

    @Override
    public int Gthn.eval(ActivationRecord rec) { return getLeft().eval(rec) > getRight().eval(rec) ? 1 : 0; }
    @Override
    public int Geq.eval(ActivationRecord rec) { return getLeft().eval(rec) >= getRight().eval(rec) ? 1 : 0; }
    @Override
    public int Lthn.eval(ActivationRecord rec) { return getLeft().eval(rec) < getRight().eval(rec) ? 1 : 0; }
    @Override
    public int Leq.eval(ActivationRecord rec) { return getLeft().eval(rec) <= getRight().eval(rec) ? 1 : 0; }
    @Override
    public int Eq.eval(ActivationRecord rec) { return getLeft().eval(rec) == getRight().eval(rec) ? 1 : 0; }
    @Override
    public int Neq.eval(ActivationRecord rec) { return getLeft().eval(rec) != getRight().eval(rec) ? 1 : 0; }

/*
    @Override
    public int AndExpr.eval(ActivationRecord rec) { 
        boolean left  = getLeft().eval(rec) == 1 ? true : false;
        boolean right = getRight().eval(rec) == 1 ? true : false;
        return left && right ? 1 : 0;
    }

    @Override
    public int OrExpr.eval(ActivationRecord rec) { 
        boolean left  = getLeft().eval(rec) == 1 ? true : false;
        boolean right = getRight().eval(rec) == 1 ? true : false;
        return left || right ? 1 : 0;
    }
    @Override
    public int NotExpr.eval(ActivationRecord rec) { return getExpr().eval(rec) == 1 ? 0 : 1; } 
*/
}
