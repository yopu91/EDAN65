aspect PredefinedFunctions {

	class Printer extends ParamFunc {
/*		Declare printArgDecl;
		
		public IdDecl getArg(){
			printArgDecl = new Declare(
                                                        new IntType(),
                                                        new IdDecl("value"),
                                                        new Opt<Expr>()
                                                );
			
			printArgDecl.setExpr( new IntLiteral("0") );
			return printArgDecl.getIdDecl();
		}
        	public Printer() {
            		super(
				new IntType(), 
				new IdDecl("print"), 
				new List<Param>( 
					new Param( 
						new IntType(), 
						new IdDecl("value")
						)), 
				new List<Stmt>() 	
			     );
			getParam(0).
        	}

*/  
		public Printer() {
                        super(new IntType(), new IdDecl("print"),
                                new List<Param>( new Param( new IntType(), new IdDecl("value")) ), new List<Stmt>() );

                }

		boolean first = true;

	        @Override
	        public int eval(ActivationRecord rec) {
	           	System.out.println(rec.get("param0_value"));
		       	return 0;
			
        	}

    	}

    	class Reader extends ParamFunc {
        	public Reader() {
            		super( new IntType(), new IdDecl( "read"), new List<Param>(), new List<Stmt>() );
        	}

        	@Override
       	 	public int eval(ActivationRecord rec) {
            		return 0;
        	}
		
  
  	}


	syn nta List<ParamFunc> Program.PredefinedFunctions() {	
		List<ParamFunc> funcList = new List<ParamFunc>();
		funcList.add(new Printer());
		funcList.add(new Reader());
		return funcList;
	}

	inh List<ParamFunc> ASTNode.PredefinedFunctions();
	eq Program.getChild().PredefinedFunctions() = PredefinedFunctions();

}
