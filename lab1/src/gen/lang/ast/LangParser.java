package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short NOT = 2;
		static public final short NUMERAL = 3;
		static public final short FOR = 4;
		static public final short IF = 5;
		static public final short UNTIL = 6;
		static public final short DO = 7;
		static public final short OD = 8;
		static public final short THEN = 9;
		static public final short FI = 10;
		static public final short ASSIGN = 11;

		static public final String[] NAMES = {
			"EOF",
			"ID",
			"NOT",
			"NUMERAL",
			"FOR",
			"IF",
			"UNTIL",
			"DO",
			"OD",
			"THEN",
			"FI",
			"ASSIGN"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nzaLaFWa0CX0SL3q10l3NnHHDDr2SV$NF#P##pJXTGiZ5kyj7Ex59A5y0M2LnIGmbbL6I" +
		"lMWHr#AhDxX0UOgE62D125KrcVOpGPMoWPpcXvKJeqCbL6mEgWFjAp7e9FSt1jrAjoc5FgN" +
		"BOZSUlkyoqou0nPDN$JiCukVAD0iOxcDKbdkOvN35noOZuP4AYR6zA5cHEminRavLLOrFKY" +
		"eWSVdYdx7oIwKUXHjvZsQezi$JIqkCqo4kUya1XoVsJtSppAXSvCvxa84SQ0M$0uVz$QN7w" +
		"UlTDJYyqqrLAPg8wxSuRMDy#70==");

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] program = stmt
			Action.RETURN,	// [1] stmt = forStmt
			Action.RETURN,	// [2] stmt = ifStmt
			Action.RETURN,	// [3] stmt = assignment
			RETURN7,	// [4] forStmt = FOR assignment UNTIL expr DO stmt OD; returns 'OD' although none is marked
			RETURN5,	// [5] ifStmt = IF expr THEN stmt FI; returns 'FI' although none is marked
			RETURN3,	// [6] assignment = id ASSIGN expr; returns 'expr' although none is marked
			Action.RETURN,	// [7] expr = id
			Action.RETURN,	// [8] expr = numeral
			RETURN2,	// [9] expr = NOT expr; returns 'expr' although none is marked
			Action.RETURN,	// [10] numeral = NUMERAL
			Action.RETURN	// [11] id = ID
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
