package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short INT = 2;
		static public final short IF = 3;
		static public final short WHILE = 4;
		static public final short LPAR = 5;
		static public final short RPAR = 6;
		static public final short LBRACKET = 7;
		static public final short RBRACKET = 8;
		static public final short SEMI = 9;
		static public final short NUMERAL = 10;
		static public final short ELSE = 11;
		static public final short ASSIGN = 12;

		static public final String[] NAMES = {
			"EOF",
			"ID",
			"INT",
			"IF",
			"WHILE",
			"LPAR",
			"RPAR",
			"LBRACKET",
			"RBRACKET",
			"SEMI",
			"NUMERAL",
			"ELSE",
			"ASSIGN"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oDajTE0a4KXlyL5HP455p0tWKxbXWJlLDlZBt4RZHU#HO#hhrXRyT$nrao654d#NPEFsS" +
		"d1y0XEf51EIAeG2NIA161JLiuP#j4mf3h3Bar9myminrHDCY7lACKGVWHGX5yA9PZprVmxa" +
		"C0VVB6EuqgzAA9T9Cowlr8ouky8eOaQk1GhoPnrA8HzMXcH0iwq2RFI64GFHX2bp5x51Qd0" +
		"EDDs$zawsj#kAU44vRo7PBiNiFUdg$G7UR$XvddLedndpniwa7YrGofjtBKU$br5qlb1XXX" +
		"qsBJKaPv#0Ww2ygN8cdIHjh96CcG5Z995icIc$CTdZaoHHR8ibkRp91fxLyXesHLwsjabgo" +
		"J3J9EDhLlbsmPjRV9FDafq7kFx9C3hJi$nRc8I9Qy$nPZr1qsP9##9moR$Ir#n90ZXhpoG#" +
		"tHl$fxCw3WaGjvaaTvaFiywwtSQIcRPxzHtsivqVgLdCkPdCfbBYIXjZ2fIIYBnUtqSpzzt" +
		"6ChZmXtnk5UEeohO4mbOwBKu$J5kRCnjQSMDzHIErlt2GULRw8=");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = function.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Function a = (Function) _symbol_a.value;
					 return new Program(a);
				}
			},
			Action.RETURN,	// [1] function = paramFunc
			Action.RETURN,	// [2] function = callFunc
			Action.NONE,  	// [3] opt$SEMI = 
			Action.RETURN,	// [4] opt$SEMI = SEMI
			new Action() {	// [5] paramFunc = INT LPAR RPAR LBRACKET stmt_list.t RBRACKET opt$SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 5];
					final List t = (List) _symbol_t.value;
					 return new ParamFunc(t);
				}
			},
			new Action() {	// [6] callFunc = idUse.id LPAR RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final IdUse id = (IdUse) _symbol_id.value;
					return new CallFunc(id);
				}
			},
			Action.RETURN,	// [7] stmt = ifStmt
			Action.RETURN,	// [8] stmt = whileStmt
			Action.RETURN,	// [9] stmt = declare
			Action.RETURN,	// [10] stmt = assign
			new Action() {	// [11] ifStmt = IF LPAR expr.a RPAR LBRACKET stmt.t RBRACKET else_exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_t = _symbols[offset + 6];
					final Stmt t = (Stmt) _symbol_t.value;
					final Symbol _symbol_e = _symbols[offset + 8];
					final Opt e = (Opt) _symbol_e.value;
					return new IfStmt(a,t,e);
				}
			},
			new Action() {	// [12] else_exp = ELSE LBRACKET stmt.u RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_u = _symbols[offset + 3];
					final Stmt u = (Stmt) _symbol_u.value;
					return new Opt(u);
				}
			},
			new Action() {	// [13] else_exp = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Opt();
				}
			},
			new Action() {	// [14] whileStmt = WHILE LPAR expr.a RPAR LBRACKET stmt.t RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_t = _symbols[offset + 6];
					final Stmt t = (Stmt) _symbol_t.value;
					return new WhileStmt(a,t);
				}
			},
			new Action() {	// [15] declare = INT idUse.id SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final IdUse id = (IdUse) _symbol_id.value;
					 return new Declare(id);
				}
			},
			new Action() {	// [16] assign = idUse.id ASSIGN expr.a SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final IdUse id = (IdUse) _symbol_id.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					return new Assignment(id,a);
				}
			},
			new Action() {	// [17] stmt_list = stmt.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Stmt a = (Stmt) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [18] stmt_list = stmt_list.a stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					 return a.add(b);
				}
			},
			Action.RETURN,	// [19] expr = numeral
			Action.RETURN,	// [20] expr = idUse
			new Action() {	// [21] numeral = NUMERAL.num
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol num = _symbols[offset + 1];
					return new Numeral(num);
				}
			},
			new Action() {	// [22] idUse = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					return new IdUse(id);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
