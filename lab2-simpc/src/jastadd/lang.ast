Program ::= ParamFunc*;
ParamFunc	 	::= IdDecl Param* Stmt*;
Param			::= IdDecl;

abstract Stmt;

WhileStmt:Stmt		::= Cond:Expr Stmt*;
IfStmt:Stmt		::= Cond:Expr Then:Stmt*;
ElseStmt:Stmt		::= Stmt*; 
ReturnStmt:Stmt		::= Expr;
FuncCall:Expr		::= IdUse Expr*;

FuncStmt:Stmt 		::= FuncCall; /*Needed to solve if(func(3)+1 > 2)... or is it really needed?*/

Assignment:Stmt		::= IdUse Expr;
Declare:Stmt		::= IdDecl [Expr];


abstract Expr;
Numeral:Expr		::= <NUMERAL>;
IdUse:Expr		::= <ID>; //anv√§nd
IdDecl			::= <ID>; //deklarera

BinaryExpr:Expr		::= Left:Expr Right:Expr;

Add:BinaryExpr;	//	::= Left:DivMult Right:PlusMinus;
Sub:BinaryExpr;	//  	::= Left:DivMult Right:PlusMinus;
Div:BinaryExpr;	//  	::= Left:Term Right:DivMult;
Mul:BinaryExpr;	//  	::= Left:Term Right:DivMult;
Mod:BinaryExpr;	//  	::= Left:Term Right:DivMult;

Neq:BinaryExpr;	// 	::= Left:Term Right:Term;
Eq:BinaryExpr;	// 	::= Left:Term Right:Term;
Leq:BinaryExpr;	// 	::= Left:Term Right:Term;
Lthn:BinaryExpr;// 	::= Left:Term Right:Term;
Geq:BinaryExpr;	//  	::= Left:Term Right:Term;
Gthn:BinaryExpr;// 	::= Left:Term Right:Term;
