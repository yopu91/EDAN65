%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};


%terminals ID;
// NUMERAL;

//Structure terminals
%terminals LPAR,RPAR, INT;
//LBRACKET,RBRACKET;

//Arith terminals
//%terminals ADD, SUB, MUL, DIV, MOD;

//Comparsion terminals
//%terminals EQ, NEQ, LEQ, LTHN, GEQ, GTHN, SEMI;

%typeof program = "Program";
%typeof stmt = "Stmt";
//%typeof ifStmt = "IfStmt";
//%typeof whileStmt = "WhileStmt";
//%typeof function = "Function";
%typeof method = "Method";
//%typeof expr = "Expr";
%typeof intDecl = "intDecl";


%goal program;

program = stmt.a {: return new Program(a); :};
stmt =	 method.a 	{: return new Method(a); :};
//	| ifStmt.a 	{: return new IfStmt(a); :} 
//	| whileStmt.a 	{: return new WhileStmt(a); :}
//	| function.a  	{: return new Function(a); :}
//	| expr.a	{: return new Expr(a); :};
method = intDecl LPAR ID RPAR 
	{: return new Method();:};
//ifStmt = IF LPAR compare.a RPAR doSomething {: return new Compare(a);};
//whileStmt = WHILE LPAR compare.a RPAR doSomething {: return new WhileStmt(a);:};
//ifStmt =	expr.a {:return new IfStmt(a);:};
//whileStmt =	expr.a {:return new WhileStmt(a);:};
//function =	expr.a {:return new Function(a);:};
intDecl = INT ID  {:return intDecl(); :};
//expr =		expr.a {:return new Expr(a);:};

