%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};


%terminals ID, NUMERAL, ASSIGN, IF,ELSE, WHILE, INT, RETURN, COMMA;
//Structure terminals
%terminals LPAR, RPAR, LBRACKET, RBRACKET, SEMI;

//Arith terminals
%terminals ADD, SUB, MUL, DIV, MOD;

//Comparsion terminals
%terminals EQ, NEQ, LEQ, LTHN, GEQ, GTHN, SEMI;

%typeof program = "Program";
%typeof function = "Function";
%typeof paramFunc = "ParamFunc";
%typeof funcStmt = "FuncStmt";
%typeof func_list = "List";
%typeof stmt = "Stmt";
%typeof stmt_list = "List";
%typeof ifStmt = "IfStmt";
%typeof else = "ElseStmt";
%typeof whileStmt = "WhileStmt";
%typeof returnStmt = "ReturnStmt";
%typeof assign = "Assignment";
%typeof declare = "Declare";
%typeof expr ="Expr";
%typeof numeral = "Numeral";
%typeof idUse = "IdUse";
%typeof param = "Param";
%typeof param_list = "List";
%typeof arg = "Argument";
%typeof arg_list = "List";
%typeof expr_list = "List";
%typeof idArg = "IdArg";
%typeof funcArg = "FuncArg";
%typeof factor = "Factor";
%typeof term = "Term";


%goal program;

program = func_list.a {: return new Program(a); :};

function = paramFunc;

paramFunc = INT idUse.id LPAR param_list.p RPAR LBRACKET stmt_list.t RBRACKET  {: return new ParamFunc(id,p,t); :};

funcStmt = idUse.id LPAR arg_list.l RPAR {:return new FuncStmt(id,l);:};

stmt = ifStmt | whileStmt| declare | funcStmt | assign | returnStmt;

ifStmt = IF LPAR expr.a RPAR LBRACKET stmt_list.t RBRACKET else {:return new IfStmt(a,t);:};



/****************************/
param = INT idUse.id {:return new Param(new Opt(id));:}
	| COMMA INT idUse.id {: return new Param(new Opt(id));:}
	| {:return new Param(new Opt());:}	
	;
/********************************/


arg = idArg | funcArg ;

idArg = idUse.id {:return new IdArg(new Opt(id));:}
	| COMMA idUse.id {:return new IdArg(new Opt(id));:}
	;

funcArg = funcStmt.t {:return new FuncArg(new Opt(t));:}
	|  COMMA funcStmt.t {:return new FuncArg(new Opt(t));:}
	|{:return new FuncArg(new Opt());:}
	;



else=
	ELSE LBRACKET stmt_list.u RBRACKET {:return new ElseStmt(u);:}
	|
	;

whileStmt = WHILE LPAR expr.a RPAR LBRACKET stmt_list.t RBRACKET {:return new WhileStmt(a,t);:};

declare = INT idUse.id SEMI{: return new Declare(id);:};

returnStmt = RETURN expr_list.a SEMI {: return new ReturnStmt(a);:};

assign = idUse.id ASSIGN expr_list.a SEMI {:return new Assignment(id,a);:};

param_list =   
       	param.a {: return new List().add(a); :}
        | param_list.a param.b {: return a.add(b); :}
        ;


arg_list =   
       	arg.a {: return new List().add(a); :}
        |  arg_list.a arg.b {: return a.add(b); :}
        ;


stmt_list =
	stmt.a {: return new List().add(a); :}
	| stmt_list.a stmt.b {: return a.add(b); :}
	;

func_list =
        function.a {: return new List().add(a); :}
        | func_list.a function.b {: return a.add(b); :}
        ;


expr_list =
        expr.a {: return new List().add(a); :}
        | expr_list.a expr.b {: return a.add(b); :}
        ;


bin_exp = term.a MUL factor.b {:return new Mul(a,b);:}
	| expr.a ADD term.b {: return new Add(a,b);:}
	| expr.a SUB term.b {: return new Sub(a,b);:}
	| term.a DIV factor.b {: return new Div(a,b);:}
	| term.a MOD factor.b {: return new Mod(a,b);:}
	| expr.a EQ expr.b {: return new Eq(a,b);:}
	| expr.a NEQ expr.b {: return new Neq(a,b);:}
	| expr.a GTHN expr.b {: return new Gthn(a,b);:}
	| expr.a LTHN expr.b {: return new Lthn(a,b);:}
	| expr.a GEQ expr.b {: return new Geq(a,b);:}
	| expr.a LEQ expr.b {:return new Leq(a,b);:}
	;

term = term MUL factor |
	term DIV factor|
	term MOD factor
	| factor;

factor = numeral | idUse ;

expr = numeral | idUse | bin_exp;
numeral = NUMERAL.num {:return new Numeral(num);:};
idUse = ID.id {:return new IdUse(id);:};


