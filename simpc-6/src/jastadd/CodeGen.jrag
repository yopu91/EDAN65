/**
 * @author daniellundell91@gmail.com
 */
aspect CodeGen {
	private static int Program.next_label = 1;
	
	public static int Program.nextCounter(){
		return Program.next_label++;
	}

	public void Program.genCode(PrintStream out) {
		//START OF PROGRAM
		out.println(		".global _start");
		out.println(		".data");
		out.println(		"buf: .skip 1024");
		out.println(		".text");	
		out.println(		"_start:");
		out.println(		"");	
		//call main function	
		out.println(		"call main");	
		//call sys_exit and helper function
		out.println(		"exit:");
		out.println(		"movq $0, %rdi");
		out.println(		"movq $60, %rax");
		out.println(		"syscall");
		out.println(		"");
		//END OF PROGRAM

		for(ParamFunc paFu: getParamFuncList()){
			paFu.genCode(out);
		}
		//ADD THE HELPER FUNCTIONS
		printHelper(out);
	}
	
	public void ParamFunc.genCode(PrintStream out){
		out.println(		getName().getID()+":");
		out.println(		"pushq %rbp");
		out.println(		"movq %rsp, %rbp");
		//MAKE ROOM FOR LOCAL VARIABLES
		//out.println(		"subq $"+1+", %rsp");
		
		for(Stmt stmt: getStmtsList()){
			stmt.genCode(out);
		}		

		//Return to caller
		out.println(		"movq %rbp, %rsp");
		out.println(		"popq %rbp");
		out.println(		"ret");
		out.println(		"");
		//add the fucking code
	}
	
	public void Stmt.genCode(PrintStream out){
		out.println("Missing code gen for "+ this.toString());
	}	
	
	public void IfStmt.genCode(PrintStream out){
		int ctr = Program.nextCounter();
		String if_label = "if"+ctr;
		String else_label = "else"+ctr;
	
		getCond().genCode(out);
		out.println(		"cmpq $0, %rax");
		out.println(		"je "+else_label);
		out.println(if_label+	":");
	
		for(Stmt s: getThenList()){
			s.genCode(out);
		}
		
		out.println(	else_label+":");
		if(hasElseStmt()){
			getElseStmt().genCode(out);	
		}
		out.println("end"+ if_label+":");
	}	
	
	public void ElseStmt.genCode(PrintStream out){
		for(Stmt s: getStmtList()){
			s.genCode(out);
		}
	}	
	public void WhileStmt.genCode(PrintStream out){
		String label = "while"+ Program.nextCounter();
		out.println(label+":");
		getCond().genCode(out);
		out.println(		"cmpq $0, %rax");
		out.println(		"je end" + label);
		for(Stmt s: getStmtList()){
			s.genCode(out);
		}
		out.println(		"jmp "+label);
		out.println(		"end"+label+":");
		
	}	
	public void ReturnStmt.genCode(PrintStream out){
		getExpr().genCode(out);
	}

	public void FuncStmt.genCode(PrintStream out){
		getFuncCall().genCode(out);	
	}

	public void Assignment.genCode(PrintStream out){
		getExpression().genCode(out);
		out.println("		movq %rax, "+getIdentifier().decl().address());	
	}

	public void Declare.genCode(PrintStream out){
		out.println(		"subq $8, %rsp");
		if(hasExpr()){
			getExpr().genCode(out);
			out.println("	movq %rax, "+getIdDecl().address());
		}
	}

	/**
 	 * Generate code to evaluate the expression and
 	 * store the result in RAX.
 	 *
 	 * This must be implemented for every subclass of Expr!
 	 */

	public void Expr.genCode(PrintStream out){
		out.println("Missing code gen for "+ this.toString());
	}	
	
	public void BinaryExpr.evalGenCode(PrintStream out){
		getLeft().genCode(out);
		out.println(		"pushq %rax");
		getRight().genCode(out);
		out.println(		"movq %rax, %rbx");
		out.println(		"popq %rax");
	}

	public void BinaryExpr.cmpGenCode(PrintStream out){
		evalGenCode(out);
		out.println(		"movq %rax, %rcx");
		out.println(		"movq $0, %rax");
		out.println(		"movq $1, %rdx");
		out.println(		"cmpq %rbx, %rcx");
	}	
	
	public void Add.genCode(PrintStream out){
		evalGenCode(out);
		out.println(		"addq %rbx, %rax");
	}

	public void Sub.genCode(PrintStream out){
		out.println(		"subq %rbx, %rax");
	}

	public void Div.genCode(PrintStream out){
		out.println(		"idivq %rbx, %rax");
	}
	
	public void Mul.genCode(PrintStream out){
		out.println(		"imulq %rbx, %rax");
	}

	public void Eq.genCode(PrintStream out){
		cmpGenCode(out);
		out.println(		"cmovne %rdx, %rax");
	}	
	
	public void Neq.genCode(PrintStream out){
		cmpGenCode(out);
		out.println(		"cmovne %rdx, %rax");
	}
	
	public void Leq.genCode(PrintStream out){
		cmpGenCode(out);
		out.println(		"cmovle %rdx, %rax");
	}	
	public void Lthn.genCode(PrintStream out){
		cmpGenCode(out);
		out.println(		"cmovl %rdx, %rax");
	}	
	
	public void Geq.genCode(PrintStream out){
		cmpGenCode(out);
		out.println(		"cmovge %rdx, %rax");
	}	

	public void Gthn.genCode(PrintStream out){
		cmpGenCode(out);
		out.println(		"cmovg %rdx, %rax");
	}	

	public void FuncCall.genCode(PrintStream out){
		for(int i = getNumE()-1; i >= 0; i--){
			Expr arg = getE(i);
			arg.genCode(out);
			out.println(		"pushq %rax");	
		}
		out.println(		"call "+getName().getID());
		out.println(		"addq $" + 8*getNumE()+",%rsp");
	
	}

	public void Numeral.genCode(PrintStream out) {
		out.println(		"movq $" + getNUMERAL() + ", %rax");
	}

	public void IdUse.genCode(PrintStream out) {
		out.println("        movq " + getID() + ", %rax");
	}

	public void IdDecl.genCode(PrintStream out) {
		out.println("        movq " + address() + ", %rax");
	}
	
	//Check for local variable
	inh boolean IdDecl.isLocalVariable();
	eq Declare.getIdDecl().isLocalVariable() = true;
	eq Param.getIdDecl().isLocalVariable() = false; 
	eq ParamFunc.getType().isLocalVariable() = false; 
	eq ParamFunc.getName().isLocalVariable()= false;
	eq ParamFunc.getParams().isLocalVariable() = false;
	//eq Program.getName().getType().isLocalVariable() = false();
	/**
 	 * Address of local variable variable in the current stack frame.
 	 */
	syn String IdDecl.address(){ 
		if(!isLocalVariable()){
			return (paramIndex()*8)+"(%rbp)";
		}
		return "-"+(localIndex()*8)+"(%rbp)";
	}

	/**
 	 * Local variable counting.
 	 */
	syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

	/**
 	 * Local variable numbering.
 	 */
	syn int ASTNode.localIndex() = prevNode().localIndex();
	eq Program.localIndex() = 0;
	eq IdDecl.localIndex() = prevNode().localIndex() + 1;

	syn int ASTNode.paramIndex() = prevNode().paramIndex();
	eq ParamFunc.localIndex() = 0;
	eq IdDecl.paramIndex() = prevNode().paramIndex()+1;

	inh ASTNode ASTNode.prevNode();
	eq ASTNode.getChild(int i).prevNode() = prevNode(i);
	syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
	syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;
	
	//HELPER FUNCTIONS
	public static void Program.printHelper(PrintStream out){
		// helper functions
		out.println("# Procedure to read number from stdin");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # %rax = sys_read(0, buf, 1024)");
		out.println("        ### convert string to integer:");
		out.println("        ### %rax contains nchar");
		out.println("        ### %rsi contains ptr");
		out.println("        movq $0, %rdx           # sum = 0");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rbx     # move byte, and sign extend to qword");
		out.println("        cmpq $0x30, %rbx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rbx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rbx        # value of character");
		out.println("        addq %rbx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # return value in RAX");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### convert integer to string");
		out.println("        movq 16(%rbp), %rax     # parameter");
		out.println("        movq $(buf+1023), %rsi  # write ptr (start from end of buf)");
		out.println("        movb $0x0a, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # string length");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rbx");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rbx              # divide rdx:rax by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
	}


}
