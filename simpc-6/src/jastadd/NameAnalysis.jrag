/***************************************
Attribute grammars:
-- Expressing properties of methods/expressions/variables as ATTRIBUTES of AST nodes.
-- Define those ATTRIBUTES by EQUATIONS

- If the equation defines an attribute in the NODE - the attribute is synthesized
-- Synthesized attributes propagate information upwards in the AST
- If the equation defines an attribute in the CHILD - the attribute is inherited
-- Inherited attributes propagate information downwards in the AST



Tips:  localLookup should not call lookup. It should never do that, since localLookup looks for local declarations and
 not for declarations defined somewhere else (which is what lookup finds).


The only declarations we are interested in are
int FFF (int a)
	int b

FFF, a and b


TA bort lookups i assignments och dylikt. Det är bara i decl, paramfunc och params som det är intressant --> allt annat är överflödigt
***************************************/



aspect NameAnalysis {

	syn IdDecl IdUse.decl() = lookup(getID());

	inh IdDecl IdUse.lookup(String name);

	inh IdDecl IdDecl.lookup(String name);

	inh IdDecl ParamFunc.lookup(String name);
	syn IdDecl ParamFunc.localLookup(String name) = unknownDecl();
	
	
	inh IdDecl Stmt.lookup(String name);	
	
	syn IdDecl Stmt.localLookup(String name) = unknownDecl();
	
	

/*******************************************************/
/*	Checks names of methods (i.e global variables) */
/*******************************************************/

	eq Program.getChild().lookup(String name) {
		for(int i = 0; i<getNumParamFunc(); i++){
                        IdDecl decl = getParamFunc(i).getName();
                        if(decl.getID().equals(name)){
                                return decl;
                        }
		}
		for(ParamFunc p : PredefinedFunctions()){
			if(p.getName().getID().equals(name)){
				return p.getName();
			}
		}
		return unknownDecl();
	}


/********************************************************/
/* 	Checking PARAMS and STMTS in ParamFuncs		*/
/********************************************************/

	eq ParamFunc.getChild().lookup(String name){

			for(int j=0; j<getNumParams(); j++){
				IdDecl p = getParams(j).getIdDecl();
        	                if(p.getID().equals(name)){
                	                return p;
	                        }
			}


			for(int k=0; k<getNumStmts(); k++){
				IdDecl s = getStmts(k).localLookup(name);
				if(s.getID().equals(name)){
					return s;
				}
				
			}

		return lookup(name);
	}



/*************************************************************************************************************************************************************/
/*				TO DO															     */
/*************************************************************************************************************************************************************
 
 	 do a lookup withinin the scope (localLookup)
		Did we find the decl?
			YES:
				Return it. All is good.
			NO:
				Are we inside a while- or if-stmt? (conditional stmt)
					YES:
						i. Go to the parent node of the conditional stmt ( i.e, the Stmt that has the conditional stmt as a child) ***AAA***
						ii. Check amongst all stmts UP TO to conditional stmt --> i.e, do a lookup "above" the conditional stmt ***AAA***
							Did we find a decl?
								YES:
									 return it. All is good.
								NO:
									 Undeclared variable! Programmers fault!
					NO:
						Referring do undeclared variable! Programmers fault!
							
***AAA*** = 	we need a way for while- and if-stmts to do a lookup in the parent, something like getParent.localLookup(name,index) 
		where index are the number of stmts up until the while/if - 1.					

*************************************************************************************************************************************************************/
/*************************************************************************************************************************************************************/



	syn IdDecl Declare.localLookup(String name){
	//	System.out.println("Checking if "+getIdDecl().getID()+" equals "+name);
		if(getIdDecl().getID().equals(name)){
			return getIdDecl();
		}
		return unknownDecl();
	}


	syn boolean IdDecl.isMultiplyDeclared() {
		IdDecl decl = lookup(getID());
		if(decl.isUnknown()){
			return false;
		}
		return decl != this;
	}

	


}

aspect CircularDefinitions {
	syn boolean IdUse.isCircular() { 
		return inExprOf(decl());
	}
	inh boolean IdUse.inExprOf(IdDecl decl);
	eq Program.getChild().inExprOf(IdDecl decl) {
		return false;
	}
	inh boolean Stmt.inExprOf(IdDecl decl);
	eq Declare.getExpr().inExprOf(IdDecl decl){
		if(getIdDecl() == decl){
			return true;
		}
		return inExprOf(decl);		
	}
}




/**************************************************************************************

Program ::= ParamFunc*;
ParamFunc               ::= Name:IdDecl Params:Param* Stmts:Stmt*;
Param                   ::= IdDecl;

abstract Stmt;

WhileStmt:Stmt          ::= Cond:Expr Stmt*;
IfStmt:Stmt             ::= Cond:Expr Then:Stmt* [ElseStmt];
ElseStmt:Stmt           ::= Stmt*;
ReturnStmt:Stmt         ::= Expr;
FuncCall:Expr           ::= Name:IdUse E:Expr*;

FuncStmt:Stmt           ::= FuncCall;


Assignment:Stmt         ::= Identifier:IdUse Expression:Expr;
Declare:Stmt            ::= Identifier:IdDecl [Expr];

abstract Expr;
Numeral:Expr            ::= <NUMERAL>;
IdUse:Expr              ::= <ID>; 
IdDecl                  ::= <ID>; 

UnknownDecl : IdDecl;

BinaryExpr:Expr         ::= Left:Expr Right:Expr;
Add:BinaryExpr;
Sub:BinaryExpr;
Div:BinaryExpr;
Mul:BinaryExpr;
Mod:BinaryExpr;

Neq:BinaryExpr;
Eq:BinaryExpr;
Leq:BinaryExpr;
Lthn:BinaryExpr;
Geq:BinaryExpr;
Gthn:BinaryExpr;

*******************************************************/

