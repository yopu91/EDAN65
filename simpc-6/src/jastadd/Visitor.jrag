aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(ParamFunc node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(IfStmt node, Object data);

		public Object visit(Param node, Object data);
		public Object visit(ReturnStmt node, Object data);
		public Object visit(ElseStmt node, Object data);
		public Object visit(FuncStmt node, Object data);
		public Object visit(Assignment node, Object data);
		public Object visit(Declare node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Neq node, Object data);
		public Object visit(Eq node, Object data);
		public Object visit(Leq node, Object data);
		public Object visit(Lthn node, Object data);
		public Object visit(Geq node, Object data);
		public Object visit(Gthn node, Object data);
		public Object visit(Numeral node, Object data);

		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);

	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ParamFunc.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	
	public Object WhileStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IfStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Param.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ElseStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ReturnStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FuncStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Assignment.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}	
	public Object Declare.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}


	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}


	public Object Neq.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Eq.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Leq.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Lthn.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Geq.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Gthn.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

}
