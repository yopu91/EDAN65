%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};


%terminals ID, NUMERAL, ASSIGN, IF,ELSE, WHILE, INT, RETURN, COMMA;
//Structure terminals
%terminals LPAR, RPAR, LBRACKET, RBRACKET, SEMI;

//Arith terminals
%terminals ADD, SUB, MUL, DIV, MOD;

//Comparsion terminals
%terminals EQ, NEQ, LEQ, LTHN, GEQ, GTHN, SEMI;

%typeof program = "Program";
%typeof paramFunc = "ParamFunc";
%typeof funcStmt = "FuncStmt";
%typeof func_list = "List";
%typeof stmt = "Stmt";
%typeof stmt_list = "List";
%typeof ifStmt = "IfStmt";
%typeof else = "ElseStmt";
%typeof whileStmt = "WhileStmt";
%typeof returnStmt = "ReturnStmt";
%typeof assign = "Assignment";
%typeof declare = "Declare";
%typeof expr ="Expr";
%typeof numeral = "Numeral";
%typeof idUse = "IdUse";
%typeof param = "Param";
%typeof param_list = "List";
%typeof arg_list = "List";
%typeof funccall = "FuncCall";
%typeof iddecl = "IdDecl";
%typeof term = "Expr";
%typeof factor = "Expr";
%typeof compare = "Expr";
%typeof sum = "Expr";
%goal program;





program = func_list.a {: return new Program(a); :};


paramFunc = INT iddecl.id LPAR param_list.p RPAR LBRACKET stmt_list.t RBRACKET  {: return new ParamFunc(id,p,t); :};

funccall = idUse.id LPAR arg_list.l RPAR {:return new FuncCall(id,l);:};

funcStmt = funccall.a SEMI {:return new FuncStmt(a);:};

stmt = ifStmt | whileStmt| declare | assign | returnStmt | funcStmt;


ifStmt = IF LPAR expr.a RPAR LBRACKET stmt_list.t RBRACKET else.e {:return new IfStmt(a,t, new Opt(e));:};

param = INT iddecl.id {:return new Param(id);:};

param_list = param.par {: return new List().add(par); :}
       	 | param_list.a COMMA param.par {: return a.add(par); :}
       	 | {: return new List();:} /*Returns an empty list i.e no arguments*/
       	 ;

arg = expr;

arg_list =
        arg.ar {: return new List().add(ar); :}
        | arg_list.a COMMA arg.ar {: return a.add(ar); :}
        | {: return new List();:}
        ;


else=
	ELSE LBRACKET stmt_list.u RBRACKET {:return new ElseStmt(u);:}
	|
	;


whileStmt = WHILE LPAR expr.a RPAR LBRACKET stmt_list.t RBRACKET {:return new WhileStmt(a,t);:};


declare = INT iddecl.id SEMI {: return new Declare(id, new Opt());:} 
	| INT iddecl.id ASSIGN expr.a SEMI {: return new Declare(id,new Opt(a));:}
	;

returnStmt = RETURN expr.a SEMI {: return new ReturnStmt(a);:};


assign = idUse.id ASSIGN expr.a SEMI {:return new Assignment(id,a);:};


stmt_list =
	stmt.st {: return new List().add(st); :}
	| stmt_list.a stmt.st {: return a.add(st); :}
	;

func_list =
        paramFunc.func {: return new List().add(func); :}
        | func_list.a paramFunc.func {: return a.add(func); :}
        ;

/*
compare = expr2.a EQ expr2.b {: return new Eq(a,b);:}
	| expr2.a NEQ expr2.b {: return new Neq(a,b);:}
	| expr2.a GTHN expr2.b {: return new Gthn(a,b);:}
	| expr2.a LTHN expr2.b {: return new Lthn(a,b);:}
	| expr2.a GEQ expr2.b {: return new Geq(a,b);:}
	| expr2.a LEQ expr2.b {:return new Leq(a,b);:}
	;

*/

/*
compare = e.a EQ expr.b {: return new Eq(a,b);:}
        | expr.a NEQ expr.b {: return new Neq(a,b);:}
        | expr.a GTHN expr.b {: return new Gthn(a,b);:}
        | expr.a LTHN expr.b {: return new Lthn(a,b);:}
        | expr.a GEQ expr.b {: return new Geq(a,b);:}
        | expr.a LEQ expr.b {:return new Leq(a,b);:}
        ;
*/


compare = sum.a EQ sum.b {: return new Eq(a,b);:}
        | sum.a NEQ sum.b {: return new Neq(a,b);:}
        | sum.a GTHN sum.b {: return new Gthn(a,b);:}
        | sum.a LTHN sum.b {: return new Lthn(a,b);:}
        | sum.a GEQ sum.b {: return new Geq(a,b);:}
        | sum.a LEQ sum.b {:return new Leq(a,b);:}
        ;



expr = sum | compare;
sum = 
	sum.a ADD term.b {: return new Add(a, b); :}
	| sum.a SUB term.b {: return new Sub(a, b); :}
	| term
	;
	

term = 
	 term.a MUL factor.b {: return new Mul(a, b); :}
	| term.a DIV factor.b {: return new Div(a, b); :}
	| term.a MOD factor.b {: return new Mod(a, b); :}
	| factor
	;
	
factor = numeral
	| funccall
	| idUse  
	;



numeral = NUMERAL.num {:return new Numeral(num);:};

idUse = ID.id {:return new IdUse(id);:};

iddecl = ID.id {:return new IdDecl(id);:}; 
